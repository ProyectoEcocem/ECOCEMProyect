// <auto-generated />
using System;
using ECOCEMProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECOCEMProject.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240627100900_Notifications")]
    partial class Notifications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccionMantenimientoOrdenTrabajo", b =>
                {
                    b.Property<int>("AccionesMantenimientoAMId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdenesTrabajoEquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdenesTrabajoBrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdenesTrabajoTrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrdenesTrabajoFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccionesMantenimientoAMId", "OrdenesTrabajoEquipoId", "OrdenesTrabajoBrigadaId", "OrdenesTrabajoTrabajadorId", "OrdenesTrabajoFechaId");

                    b.HasIndex("OrdenesTrabajoEquipoId", "OrdenesTrabajoBrigadaId", "OrdenesTrabajoTrabajadorId", "OrdenesTrabajoFechaId");

                    b.ToTable("AccionMantenimientoOrdenTrabajo");
                });

            modelBuilder.Entity("ECOCEMProject.AccionMantenimiento", b =>
                {
                    b.Property<int>("AMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AMId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AMId");

                    b.ToTable("AccionesMantenimientos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AccionMantenimiento");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ECOCEMProject.Bascula", b =>
                {
                    b.Property<int>("BasculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BasculaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("NoSede")
                        .HasColumnType("integer");

                    b.Property<string>("NoSerie")
                        .HasColumnType("text");

                    b.HasKey("BasculaId");

                    b.ToTable("Basculas");
                });

            modelBuilder.Entity("ECOCEMProject.Brigada", b =>
                {
                    b.Property<int>("BrigadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrigadaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.HasKey("BrigadaId");

                    b.ToTable("Brigadas");
                });

            modelBuilder.Entity("ECOCEMProject.Carga", b =>
                {
                    b.Property<int>("TipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCargaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CargaId")
                        .HasColumnType("integer");

                    b.Property<int>("EntidadCompradoraId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaVentaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PesoBruto")
                        .HasColumnType("integer");

                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.Property<int>("Tara")
                        .HasColumnType("integer");

                    b.Property<int?>("VentaEntidadCompradoraId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VentaFechaVentaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VentaSedeId")
                        .HasColumnType("integer");

                    b.HasKey("TipoCementoId", "SiloId", "VehiculoId", "FechaCargaId");

                    b.HasIndex("VentaSedeId", "VentaEntidadCompradoraId", "VentaFechaVentaId");

                    b.ToTable("Cargas");
                });

            modelBuilder.Entity("ECOCEMProject.Compra", b =>
                {
                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.Property<int>("FabricaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SedeId", "FabricaId", "FechaId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("ECOCEMProject.Descarga", b =>
                {
                    b.Property<int>("TipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CompraFabricaId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompraFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CompraSedeId")
                        .HasColumnType("integer");

                    b.Property<int>("Corriente")
                        .HasColumnType("integer");

                    b.Property<int>("DescargaId")
                        .HasColumnType("integer");

                    b.Property<int>("FabricaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCompraId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PesoBruto")
                        .HasColumnType("integer");

                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.Property<int>("Tara")
                        .HasColumnType("integer");

                    b.Property<int>("Temperatura")
                        .HasColumnType("integer");

                    b.Property<int>("TipoAsentamiento")
                        .HasColumnType("integer");

                    b.HasKey("TipoCementoId", "SiloId", "VehiculoId", "FechaId");

                    b.HasIndex("CompraSedeId", "CompraFabricaId", "CompraFechaId");

                    b.ToTable("Descargas");
                });

            modelBuilder.Entity("ECOCEMProject.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmpresaId"));

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("text");

                    b.HasKey("EmpresaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("ECOCEMProject.EntidadCompradora", b =>
                {
                    b.Property<int>("EntidadCompradoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntidadCompradoraId"));

                    b.Property<string>("NombreEntidadCompradora")
                        .HasColumnType("text");

                    b.HasKey("EntidadCompradoraId");

                    b.ToTable("EntidadCompradoras");
                });

            modelBuilder.Entity("ECOCEMProject.Equipo", b =>
                {
                    b.Property<int>("EquipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EquipoId"));

                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEId")
                        .HasColumnType("integer");

                    b.HasKey("EquipoId");

                    b.HasIndex("SedeId");

                    b.HasIndex("TipoEId");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("ECOCEMProject.Fabrica", b =>
                {
                    b.Property<int>("FabricaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FabricaId"));

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("FabricaId");

                    b.ToTable("Fabricas");
                });

            modelBuilder.Entity("ECOCEMProject.Herramienta", b =>
                {
                    b.Property<int>("HerramientaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HerramientaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("HerramientaId");

                    b.ToTable("Herramientas");
                });

            modelBuilder.Entity("ECOCEMProject.HerramientaMantNecesario", b =>
                {
                    b.Property<int>("HerramientasId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoEquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("AMId")
                        .HasColumnType("integer");

                    b.Property<double>("HorasExpId")
                        .HasColumnType("double precision");

                    b.Property<int>("CantidadR")
                        .HasColumnType("integer");

                    b.Property<int?>("HerramientaId")
                        .HasColumnType("integer");

                    b.Property<int?>("MantenimientoNecesarioAMId")
                        .HasColumnType("integer");

                    b.Property<double?>("MantenimientoNecesarioHorasExpId")
                        .HasColumnType("double precision");

                    b.Property<int?>("MantenimientoNecesarioTipoEquipoId")
                        .HasColumnType("integer");

                    b.Property<string>("UnidadMedidaR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HerramientasId", "TipoEquipoId", "AMId", "HorasExpId");

                    b.HasIndex("HerramientaId");

                    b.HasIndex("MantenimientoNecesarioTipoEquipoId", "MantenimientoNecesarioAMId", "MantenimientoNecesarioHorasExpId");

                    b.ToTable("HerramientaMantNecesarios");
                });

            modelBuilder.Entity("ECOCEMProject.MantenimientoNecesario", b =>
                {
                    b.Property<int>("TipoEquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("AMId")
                        .HasColumnType("integer");

                    b.Property<double>("HorasExpId")
                        .HasColumnType("double precision");

                    b.HasKey("TipoEquipoId", "AMId", "HorasExpId");

                    b.HasIndex("AMId");

                    b.ToTable("MantenimientosNecesarios");
                });

            modelBuilder.Entity("ECOCEMProject.MedicionBascula", b =>
                {
                    b.Property<int>("VehiculoId")
                        .HasColumnType("integer");

                    b.Property<int>("BasculaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaBId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CargaFechaCargaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CargaSiloId")
                        .HasColumnType("integer");

                    b.Property<int?>("CargaTipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CargaVehiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DescargaFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DescargaSiloId")
                        .HasColumnType("integer");

                    b.Property<int?>("DescargaTipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int?>("DescargaVehiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCargaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PesoB")
                        .HasColumnType("integer");

                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCementoId")
                        .HasColumnType("integer");

                    b.HasKey("VehiculoId", "BasculaId", "FechaBId");

                    b.HasIndex("CargaTipoCementoId", "CargaSiloId", "CargaVehiculoId", "CargaFechaCargaId");

                    b.HasIndex("DescargaTipoCementoId", "DescargaSiloId", "DescargaVehiculoId", "DescargaFechaId");

                    b.ToTable("MedicionesBasculas");
                });

            modelBuilder.Entity("ECOCEMProject.MedicionSilo", b =>
                {
                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.Property<int>("MedidorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaMId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("AlturaCinta")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("CargaFechaCargaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CargaSiloId")
                        .HasColumnType("integer");

                    b.Property<int?>("CargaTipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int?>("CargaVehiculoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DescargaFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DescargaSiloId")
                        .HasColumnType("integer");

                    b.Property<int?>("DescargaTipoCementoId")
                        .HasColumnType("integer");

                    b.Property<int?>("DescargaVehiculoId")
                        .HasColumnType("integer");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<int>("PesoM")
                        .HasColumnType("integer");

                    b.Property<double>("RadioMayorConoInf")
                        .HasColumnType("double precision");

                    b.Property<double>("RadioMayorConoSuperior")
                        .HasColumnType("double precision");

                    b.Property<double>("RadioMenorConoInferior")
                        .HasColumnType("double precision");

                    b.Property<double>("RadioMenorConoSuperior")
                        .HasColumnType("double precision");

                    b.HasKey("SiloId", "MedidorId", "FechaMId");

                    b.HasIndex("CargaTipoCementoId", "CargaSiloId", "CargaVehiculoId", "CargaFechaCargaId");

                    b.HasIndex("DescargaTipoCementoId", "DescargaSiloId", "DescargaVehiculoId", "DescargaFechaId");

                    b.ToTable("MedicionesSilos");
                });

            modelBuilder.Entity("ECOCEMProject.Medidor", b =>
                {
                    b.Property<int>("MedidorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedidorId"));

                    b.Property<string>("NoSerie")
                        .HasColumnType("text");

                    b.HasKey("MedidorId");

                    b.ToTable("Medidores");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajo", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("BrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrdenTrabajoId")
                        .HasColumnType("integer");

                    b.HasKey("EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.HasIndex("BrigadaId");

                    b.ToTable("OrdenTrabajos");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoAMRealizada", b =>
                {
                    b.Property<int>("AMId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("BrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AMId", "EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.HasIndex("EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.ToTable("OrdenTrabajoAMRealizadas");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoAtendida", b =>
                {
                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DiaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("NoHoras")
                        .HasColumnType("double precision");

                    b.Property<int?>("OrdenTrabajoBrigadaId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrdenTrabajoEquipoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OrdenTrabajoFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrdenTrabajoTrabajadorId")
                        .HasColumnType("integer");

                    b.Property<double>("PrecioPorHora")
                        .HasColumnType("double precision");

                    b.HasKey("TrabajadorId", "DiaId");

                    b.HasIndex("OrdenTrabajoEquipoId", "OrdenTrabajoBrigadaId", "OrdenTrabajoTrabajadorId", "OrdenTrabajoFechaId");

                    b.ToTable("OrdenesTrabajoAtendidas");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoHerramienta", b =>
                {
                    b.Property<int>("HerramientasId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("BrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CantidadU")
                        .HasColumnType("integer");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision");

                    b.Property<string>("UnidadMedidaU")
                        .HasColumnType("text");

                    b.Property<string>("ValeAlmacen")
                        .HasColumnType("text");

                    b.HasKey("HerramientasId", "EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.HasIndex("EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.ToTable("OrdenTrabajoHerramientas");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoRoturaEquipo", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("BrigadaId")
                        .HasColumnType("integer");

                    b.Property<int>("TrabajadorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrdenTrabajoBrigadaId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrdenTrabajoEquipoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OrdenTrabajoFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrdenTrabajoTrabajadorId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoturaEquipoEquipoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RoturaEquipoFechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RoturaEquipoRoturaId")
                        .HasColumnType("integer");

                    b.Property<int>("RoturaId")
                        .HasColumnType("integer");

                    b.HasKey("EquipoId", "BrigadaId", "TrabajadorId", "FechaId");

                    b.HasIndex("RoturaEquipoEquipoId", "RoturaEquipoRoturaId", "RoturaEquipoFechaId");

                    b.HasIndex("OrdenTrabajoEquipoId", "OrdenTrabajoBrigadaId", "OrdenTrabajoTrabajadorId", "OrdenTrabajoFechaId");

                    b.ToTable("OrdenTrabajoRoturaEquipos");
                });

            modelBuilder.Entity("ECOCEMProject.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ECOCEMProject.Rotura", b =>
                {
                    b.Property<int>("RoturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoturaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("NombreRotura")
                        .HasColumnType("text");

                    b.HasKey("RoturaId");

                    b.ToTable("Roturas");
                });

            modelBuilder.Entity("ECOCEMProject.RoturaEquipo", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<int>("RoturaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EquipoId", "RoturaId", "FechaId");

                    b.ToTable("RoturasEquipos");
                });

            modelBuilder.Entity("ECOCEMProject.Sede", b =>
                {
                    b.Property<int>("SedeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SedeId"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("NombreSede")
                        .HasColumnType("text");

                    b.Property<string>("UbicacionSede")
                        .HasColumnType("text");

                    b.HasKey("SedeId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("ECOCEMProject.Silo", b =>
                {
                    b.Property<int>("SiloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SiloId"));

                    b.Property<int>("NoSede")
                        .HasColumnType("integer");

                    b.Property<string>("NoSilo")
                        .HasColumnType("text");

                    b.Property<int>("altura")
                        .HasColumnType("integer");

                    b.Property<int>("radio")
                        .HasColumnType("integer");

                    b.HasKey("SiloId");

                    b.ToTable("Silos");
                });

            modelBuilder.Entity("ECOCEMProject.TipoCemento", b =>
                {
                    b.Property<int>("TipoCementoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipoCementoId"));

                    b.Property<string>("NombreTipoCemento")
                        .HasColumnType("text");

                    b.HasKey("TipoCementoId");

                    b.ToTable("TipoCementos");
                });

            modelBuilder.Entity("ECOCEMProject.TipoEquipo", b =>
                {
                    b.Property<int>("TipoEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TipoEId"));

                    b.Property<string>("TipoE")
                        .HasColumnType("text");

                    b.HasKey("TipoEId");

                    b.ToTable("TiposEquipos");
                });

            modelBuilder.Entity("ECOCEMProject.Trabajador", b =>
                {
                    b.Property<int>("TrabajadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrabajadorId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreTrabajador")
                        .HasColumnType("text");

                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.HasKey("TrabajadorId");

                    b.HasIndex("SedeId");

                    b.ToTable("Trabajadores");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Trabajador");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ECOCEMProject.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NoSede")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECOCEMProject.Vehiculo", b =>
                {
                    b.Property<int>("VehiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehiculoId"));

                    b.Property<string>("NoSerie")
                        .HasColumnType("text");

                    b.HasKey("VehiculoId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("ECOCEMProject.Venta", b =>
                {
                    b.Property<int>("SedeId")
                        .HasColumnType("integer");

                    b.Property<int>("EntidadCompradoraId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVentaId")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SedeId", "EntidadCompradoraId", "FechaVentaId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "ClaimType");

                    b.ToTable("IdentityRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<int>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Reporte", b =>
                {
                    b.Property<int>("EquipoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaId")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("CostoMantContratado")
                        .HasColumnType("double precision");

                    b.Property<double>("CostoTotalMant")
                        .HasColumnType("double precision");

                    b.Property<double>("Facturacion")
                        .HasColumnType("double precision");

                    b.Property<double>("PerdidaIndisponibilidad")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoOPeracionReal")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoOperacionRequerido")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoParoMant")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoParoTrabajosPlan")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoRealMant")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoRealParoFalla")
                        .HasColumnType("double precision");

                    b.Property<double>("TiempoRequeridoAccProgramadas")
                        .HasColumnType("double precision");

                    b.HasKey("EquipoId", "FechaId");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ECOCEMProject.MantenimientoPlanificado", b =>
                {
                    b.HasBaseType("ECOCEMProject.AccionMantenimiento");

                    b.HasDiscriminator().HasValue("MantenimientoPlanificado");
                });

            modelBuilder.Entity("ECOCEMProject.JefeMantenimiento", b =>
                {
                    b.HasBaseType("ECOCEMProject.Trabajador");

                    b.HasDiscriminator().HasValue("JefeMantenimiento");
                });

            modelBuilder.Entity("ECOCEMProject.Operador", b =>
                {
                    b.HasBaseType("ECOCEMProject.Trabajador");

                    b.HasDiscriminator().HasValue("Operador");
                });

            modelBuilder.Entity("ECOCEMProject.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("AccionMantenimientoOrdenTrabajo", b =>
                {
                    b.HasOne("ECOCEMProject.AccionMantenimiento", null)
                        .WithMany()
                        .HasForeignKey("AccionesMantenimientoAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOCEMProject.OrdenTrabajo", null)
                        .WithMany()
                        .HasForeignKey("OrdenesTrabajoEquipoId", "OrdenesTrabajoBrigadaId", "OrdenesTrabajoTrabajadorId", "OrdenesTrabajoFechaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECOCEMProject.Carga", b =>
                {
                    b.HasOne("ECOCEMProject.Venta", "Venta")
                        .WithMany("Cargas")
                        .HasForeignKey("VentaSedeId", "VentaEntidadCompradoraId", "VentaFechaVentaId");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("ECOCEMProject.Descarga", b =>
                {
                    b.HasOne("ECOCEMProject.Compra", "Compra")
                        .WithMany("Descargas")
                        .HasForeignKey("CompraSedeId", "CompraFabricaId", "CompraFechaId");

                    b.Navigation("Compra");
                });

            modelBuilder.Entity("ECOCEMProject.Equipo", b =>
                {
                    b.HasOne("ECOCEMProject.Sede", "Sede")
                        .WithMany("Equipos")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOCEMProject.TipoEquipo", "TipoEquipo")
                        .WithMany("Equipos")
                        .HasForeignKey("TipoEId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");

                    b.Navigation("TipoEquipo");
                });

            modelBuilder.Entity("ECOCEMProject.HerramientaMantNecesario", b =>
                {
                    b.HasOne("ECOCEMProject.Herramienta", "Herramienta")
                        .WithMany("HerramientaMantNecesarios")
                        .HasForeignKey("HerramientaId");

                    b.HasOne("ECOCEMProject.MantenimientoNecesario", "MantenimientoNecesario")
                        .WithMany("HerramientaMantNecesarios")
                        .HasForeignKey("MantenimientoNecesarioTipoEquipoId", "MantenimientoNecesarioAMId", "MantenimientoNecesarioHorasExpId");

                    b.Navigation("Herramienta");

                    b.Navigation("MantenimientoNecesario");
                });

            modelBuilder.Entity("ECOCEMProject.MantenimientoNecesario", b =>
                {
                    b.HasOne("ECOCEMProject.MantenimientoPlanificado", null)
                        .WithMany("MantenimientosNecesarios")
                        .HasForeignKey("AMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECOCEMProject.MedicionBascula", b =>
                {
                    b.HasOne("ECOCEMProject.Carga", "Carga")
                        .WithMany("MedicionesBascula")
                        .HasForeignKey("CargaTipoCementoId", "CargaSiloId", "CargaVehiculoId", "CargaFechaCargaId");

                    b.HasOne("ECOCEMProject.Descarga", "Descarga")
                        .WithMany("MedicionesBascula")
                        .HasForeignKey("DescargaTipoCementoId", "DescargaSiloId", "DescargaVehiculoId", "DescargaFechaId");

                    b.Navigation("Carga");

                    b.Navigation("Descarga");
                });

            modelBuilder.Entity("ECOCEMProject.MedicionSilo", b =>
                {
                    b.HasOne("ECOCEMProject.Carga", "Carga")
                        .WithMany("MedicionesSilo")
                        .HasForeignKey("CargaTipoCementoId", "CargaSiloId", "CargaVehiculoId", "CargaFechaCargaId");

                    b.HasOne("ECOCEMProject.Descarga", "Descarga")
                        .WithMany("MedicionesSilo")
                        .HasForeignKey("DescargaTipoCementoId", "DescargaSiloId", "DescargaVehiculoId", "DescargaFechaId");

                    b.Navigation("Carga");

                    b.Navigation("Descarga");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajo", b =>
                {
                    b.HasOne("ECOCEMProject.Brigada", null)
                        .WithMany("OrdenesTrabajo")
                        .HasForeignKey("BrigadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoAMRealizada", b =>
                {
                    b.HasOne("ECOCEMProject.AccionMantenimiento", "AccionMantenimiento")
                        .WithMany("OrdenesAMRealizadas")
                        .HasForeignKey("AMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOCEMProject.OrdenTrabajo", null)
                        .WithMany("OrdenesAMRealizadas")
                        .HasForeignKey("EquipoId", "BrigadaId", "TrabajadorId", "FechaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccionMantenimiento");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoAtendida", b =>
                {
                    b.HasOne("ECOCEMProject.OrdenTrabajo", "OrdenTrabajo")
                        .WithMany()
                        .HasForeignKey("OrdenTrabajoEquipoId", "OrdenTrabajoBrigadaId", "OrdenTrabajoTrabajadorId", "OrdenTrabajoFechaId");

                    b.Navigation("OrdenTrabajo");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoHerramienta", b =>
                {
                    b.HasOne("ECOCEMProject.Herramienta", "Herramientas")
                        .WithMany("OrdenTrabajoHerramientas")
                        .HasForeignKey("HerramientasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOCEMProject.OrdenTrabajo", "OrdenTrabajo")
                        .WithMany("OrdenTrabajoHerramientas")
                        .HasForeignKey("EquipoId", "BrigadaId", "TrabajadorId", "FechaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Herramientas");

                    b.Navigation("OrdenTrabajo");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajoRoturaEquipo", b =>
                {
                    b.HasOne("ECOCEMProject.RoturaEquipo", null)
                        .WithMany("OrdenTrabajoRoturaEquipo")
                        .HasForeignKey("RoturaEquipoEquipoId", "RoturaEquipoRoturaId", "RoturaEquipoFechaId");

                    b.HasOne("ECOCEMProject.OrdenTrabajo", null)
                        .WithMany("OrdenTrabajoRoturaEquipo")
                        .HasForeignKey("OrdenTrabajoEquipoId", "OrdenTrabajoBrigadaId", "OrdenTrabajoTrabajadorId", "OrdenTrabajoFechaId");
                });

            modelBuilder.Entity("ECOCEMProject.Sede", b =>
                {
                    b.HasOne("ECOCEMProject.Empresa", "Empresa")
                        .WithMany("Sedes")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ECOCEMProject.Trabajador", b =>
                {
                    b.HasOne("ECOCEMProject.Sede", "Sede")
                        .WithMany("Trabajadores")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sede");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ECOCEMProject.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOCEMProject.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECOCEMProject.UserRole", b =>
                {
                    b.HasOne("ECOCEMProject.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("ECOCEMProject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECOCEMProject.AccionMantenimiento", b =>
                {
                    b.Navigation("OrdenesAMRealizadas");
                });

            modelBuilder.Entity("ECOCEMProject.Brigada", b =>
                {
                    b.Navigation("OrdenesTrabajo");
                });

            modelBuilder.Entity("ECOCEMProject.Carga", b =>
                {
                    b.Navigation("MedicionesBascula");

                    b.Navigation("MedicionesSilo");
                });

            modelBuilder.Entity("ECOCEMProject.Compra", b =>
                {
                    b.Navigation("Descargas");
                });

            modelBuilder.Entity("ECOCEMProject.Descarga", b =>
                {
                    b.Navigation("MedicionesBascula");

                    b.Navigation("MedicionesSilo");
                });

            modelBuilder.Entity("ECOCEMProject.Empresa", b =>
                {
                    b.Navigation("Sedes");
                });

            modelBuilder.Entity("ECOCEMProject.Herramienta", b =>
                {
                    b.Navigation("HerramientaMantNecesarios");

                    b.Navigation("OrdenTrabajoHerramientas");
                });

            modelBuilder.Entity("ECOCEMProject.MantenimientoNecesario", b =>
                {
                    b.Navigation("HerramientaMantNecesarios");
                });

            modelBuilder.Entity("ECOCEMProject.OrdenTrabajo", b =>
                {
                    b.Navigation("OrdenTrabajoHerramientas");

                    b.Navigation("OrdenTrabajoRoturaEquipo");

                    b.Navigation("OrdenesAMRealizadas");
                });

            modelBuilder.Entity("ECOCEMProject.RoturaEquipo", b =>
                {
                    b.Navigation("OrdenTrabajoRoturaEquipo");
                });

            modelBuilder.Entity("ECOCEMProject.Sede", b =>
                {
                    b.Navigation("Equipos");

                    b.Navigation("Trabajadores");
                });

            modelBuilder.Entity("ECOCEMProject.TipoEquipo", b =>
                {
                    b.Navigation("Equipos");
                });

            modelBuilder.Entity("ECOCEMProject.Venta", b =>
                {
                    b.Navigation("Cargas");
                });

            modelBuilder.Entity("ECOCEMProject.MantenimientoPlanificado", b =>
                {
                    b.Navigation("MantenimientosNecesarios");
                });
#pragma warning restore 612, 618
        }
    }
}
